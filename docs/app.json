[{"name":"server.R","content":"library(shiny)\r\nif (!requireNamespace(\"stringr\", quietly = TRUE)) install.packages(\"stringr\")\r\nif (!requireNamespace(\"DT\", quietly = TRUE)) install.packages(\"DT\")\r\nif (!requireNamespace(\"data.table\", quietly = TRUE)) install.packages(\"data.table\")\r\n\r\n\r\nlibrary(stringr)\r\nlibrary(DT)\r\nlibrary(data.table)\r\n\r\nshinyServer(function(input,output,session){\r\n  \r\n  \r\n      # Render and read summary.txt\r\n  \r\n      output$summaryout <- renderDT({req(input$summaryfile)\r\n        summary<- read.table(input$summaryfile$datapath,\r\n                             header=TRUE,\r\n                             sep=\"\\t\") \r\n                  return(summary)\r\n        }, rownames = FALSE)\r\n      \r\n      # Control ID saving\r\n      \r\n  ControlID <- reactiveValues(value = character(0))\r\n  observeEvent(input$ControlNameSave, {\r\n    ControlID$value <- input$ControlName\r\n    output$ControlIDOutput <- renderText({\"Saved !, make sure only controls contain this name\"})\r\n  })\r\n    # Replicate IDs, manage rows and save\r\n  values <- reactiveValues(rows = 4, replicate_names = character(0)) # Create 4 rows to write in\r\n  \r\n  observeEvent(input$add_row, {\r\n    values$rows <- values$rows + 1 \r\n  })  # Add 1 row with button\r\n  \r\n  observeEvent(input$remove_row, {\r\n    if (values$rows > 1) {\r\n      values$rows <- values$rows - 1\r\n    }\r\n  }) # Remove 1 row with button\r\n  \r\n  output$dynamic_replicate <- renderUI({\r\n    lapply(1:values$rows, function(i) {\r\n      textInput(inputId = paste0(\"replicate_\", i), label = paste(\"Replicate Tag\", i))\r\n    })\r\n  }) # Render UI to write replicate names and manage row number\r\n  \r\n  observeEvent(input$save_replicate_names, {\r\n    replicate_names <- sapply(1:values$rows, function(i) {\r\n      input[[paste0(\"replicate_\", i)]]\r\n    }) \r\n    values$replicate_names <- replicate_names\r\n    output$replicate_names_output <- renderText({\"Saved !\"})\r\n  }) # Save Replicate names with a button\r\n  \r\n\r\n  # Convert summary.txt to keys.txt\r\n  \r\n  keys <- reactiveValues(df = NULL) # Create empty dataframe \"keys\"\r\n  \r\n  observeEvent(input$convert,{\r\n    summary <- read.table(input$summaryfile$datapath, header = TRUE, sep = \"\\t\") # read summary.txt\r\n    replicate_names <- values$replicate_names  # Copy replicate names\r\n    ControlID_name <- ControlID$value # Copy control ID\r\n    \r\n    keys$df<- summary %>% select(Raw.file) %>%  #Copy Raw.file column\r\n      mutate(BioReplicate= summary$Experiment) %>% #Copy Experiment and change column name to Bioreplicate\r\n      mutate(IsotopeLabelType=\"L\") %>%  # Create IsotopeLabelType column with \"L\" everywhere\r\n      mutate(Run = row_number()) %>%    # Create Run with number same as the row number\r\n      mutate(SAINT = ifelse(\r\n        grepl(ControlID_name, BioReplicate), \"C\", \"T\")) # If replicate has the ControlId in its name,\r\n    # Row will have C (control), otherwise T (test) in the column SAINT\r\n    \r\n    keys$df <- keys$df %>%  # Next steps need to be separated to work correctly,copies itself\r\n      mutate(Condition= summary$Experiment) %>%  # Create Condition column from summary\r\n      select(Condition,everything()) # Places as first column\r\n    \r\n    keys$df <- keys$df %>% slice(-n()) # Remove the artefact Total row from summary\r\n    \r\n    \r\n    # Function to remove replicates name in condition\r\n    \r\n    ReplicateNames <- replicate_names # Copy replicate names\r\n    remove_strings <- function(text, patterns) {\r\n      for (pattern in patterns) {\r\n        text <- str_replace_all(text, pattern, \"\")\r\n      } \r\n      return(text)\r\n    } # Replace the patterns from replicate names by an empty text\r\n    \r\n    keys$df <- keys$df %>%\r\n      mutate(Condition= remove_strings(Condition, \r\n                                       ReplicateNames)) # Remove replicate names in Condition column\r\n    output$keysout <- renderDT(keys$df, rownames = FALSE) # Render the keys table\r\n  })\r\n  \r\n  output$downloadkeys <- downloadHandler(filename = function(){\r\n  \"keys.txt\"},content= function(file){\r\n    write.table(keys$df,file,row.names = FALSE,sep = \"\\t\")\r\n  }) # Download keys.txt with button\r\n})","type":"text"},{"name":"ui.R","content":"library(shiny)\r\nshinyUI(fluidPage(\r\n  titlePanel(\"Convert summary.txt to keys.txt\"),\r\n  sidebarLayout(\r\n  sidebarPanel(\r\n    width = 6, # Better side panel\r\n    \r\n    # Input summary.txt\r\n    \r\n      fileInput(\"summaryfile\",\"Input summary.txt\",\r\n                accept = c(\"text/plain\",\".txt\")),\r\n    \r\n    # Input Control name and save\r\n    textInput(\"ControlName\",\"Name of the control\",value = \"\"),\r\n    actionButton(\"ControlNameSave\",\"Save\"),\r\n    textOutput(\"ControlIDOutput\"), # message confirmation\r\n\r\n    \r\n    # Input replicate names \r\n    uiOutput(\"dynamic_replicate\"),\r\n    actionButton(\"save_replicate_names\",\"Save\"),\r\n    actionButton(\"add_row\",\"Add row\"),\r\n    actionButton(\"remove_row\",\"Remove row\"),\r\n    textOutput(\"replicate_names_output\"),\r\n  \r\n    # Convert to keys.txt and download button compatible with shinylive website\r\n    \r\n    actionButton(\"convert\",\"Convert to keys.txt\"),\r\n    downloadButton <- function(...) {\r\n      tag <- shiny::downloadButton(\"downloadkeys\", \"Download keys.txt !\")\r\n      tag$attribs$download <- NULL\r\n      tag},\r\n    fluidRow(style = 'height: 200px; overflow-x: auto',DT::dataTableOutput(\"keysout\"))\r\n  ),\r\n  \r\n  mainPanel(\r\n    width = 5, # Better main panel\r\n    # Output tables\r\n    fluidRow(style = 'overflow-x: auto',DT::dataTableOutput(\"summaryout\"))\r\n   )\r\n  )\r\n  )\r\n  )","type":"text"}]
